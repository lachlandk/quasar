self.Quasar=new function(){this.add=function(e,t){const r=new this.Expression(new this.Node("operator","+"));return r.root.left=e.root,r.root.right=t.root,r},this.gcd=function(e,t){let r=Math.max(Math.abs(e),Math.abs(t)),i=Math.min(Math.abs(e),Math.abs(t));for(;0!==i;){let e=r%i;r=i,i=e}return r},this.bezout=function(e,t){let r=Math.max(Math.abs(e),Math.abs(t)),i=Math.min(Math.abs(e),Math.abs(t)),s=1,o=0,p=0,a=1;for(;0!==i;){let e=Math.floor(r/i),t=r-e*i,n=s-e*o,l=p-e*a;r=i,s=o,p=a,i=t,o=n,a=l}return[p,s]},this.lcm=function(e,t){return Math.abs(e*t)/this.gcd(e,t)},this.Node=function(e,t,r){this.type=e,this.value=t,this.properties={};for(const e in r)this.properties[e]=r[e];this.left=null,this.right=null},this.Expression=function(e=null){this.root=e,this.output=function(e=!1){let t="";return function e(r){r&&("operator"===r.type?(e(r.left),t+=r.value,e(r.right)):(r.properties.coefficient&&1!==r.properties.coefficient.value&&(t+=r.properties.coefficient.value),"expression"===r.type&&(t+="\\left("),"expression"===r.type?t+=r.value.output(!0):t+=r.value,"expression"===r.type&&(t+="\\right)"),r.properties.power&&(t+="^{","expression"===r.properties.power.type?t+=r.properties.power.value.output(!0):t+=r.properties.power.value,t+="}")))}(this.root),e?t:"\\["+t+"\\]"}},this.parse=function(e){const t=e.match(/\d+|\S/gi),r=[];if(!t)return new this.Expression;t.forEach(function(e){if(e.match(/\d+/))r.push({type:"constant",value:parseInt(e)});else if(e.match(/[a-z]/i))r.push({type:"variable",value:e});else if(e.match(/[+\-*/^]/))e.match(/\^/)?r.push({type:"operator",value:"^",associativity:"right",precedence:1}):e.match(/[\/*]/)?r.push({type:"operator",value:e,associativity:"left",precedence:2}):e.match(/[+-]/)&&r.push({type:"operator",value:e,associativity:"left",precedence:3});else if(e.match(/\(/))r.push({type:"open-parenthesis",value:"("});else{if(!e.match(/\)/))throw{name:"LexingError",msg:"Unknown Token: "+e};r.push({type:"close-parenthesis",value:")"})}});for(let e=0;e<r.length;e++)if(0===e||"variable"!==r[e].type&&"constant"!==r[e].type&&"open-parenthesis"!==r[e].type){if("operator"===r[e].type&&("-"===r[e].value&&r[e+1]&&"-"===r[e+1].value&&(r[e]={type:"operator",value:"+",associativity:"left",precedence:3},r.splice(e+1,1)),!r[e].value.match(/[+-]/)||0!==e&&"operator"!==r[e-1].type&&"open-parenthesis"!==r[e-1].type||("-"===r[e].value?r[e]={type:"operator",value:"~",precedence:0}:"+"===r[e].value&&r.splice(e,1)),r[e]&&r[e].value.match(/[/*-+^]/)&&(r[e-1]&&"operator"===r[e-1].type||!r[e-1]||!r[e+1])))throw{name:"ParsingError",msg:"Invalid operands for operator: "+r[e].value}}else"variable"!==r[e-1].type&&"constant"!==r[e-1].type&&"close-parenthesis"!==r[e-1].type||r.splice(e,0,{type:"operator",value:"*",associativity:"left",precedence:2});const i=[],s=[];for(;0!==r.length;){const e=r.shift();if("constant"===e.type||"variable"===e.type)i.push(e);else if("open-parenthesis"===e.type)s.unshift(e);else if("close-parenthesis"===e.type){for(;"open-parenthesis"!==s[0].type;)if(i.push(s.shift()),0===s.length)throw{name:"ParsingError",msg:"Mismatched delimiter: )"};s.shift()}else if("operator"===e.type)if("left"===e.associativity){for(;0!==s.length&&"operator"===s[0].type&&s[0].precedence<=e.precedence;)i.push(s.shift());s.unshift(e)}else if("right"===e.associativity){for(;0!==s.length&&s[0].precedence<e.precedence;)i.push(s.shift());s.unshift(e)}else s.unshift(e)}for(;0!==s.length;){if("open-parenthesis"===s[0].type)throw{name:"ParsingError",msg:"Mismatched delimiter: )"};i.push(s.shift())}i.forEach(function(e){if("variable"===e.type||"constant"===e.type)s.unshift(new this.Node(e.type,e.value));else if("operator"===e.type)if(0===e.precedence){let t=new this.Node(e.type,e.value);t.left=s.shift(),s.unshift(t)}else{let t=new this.Node(e.type,e.value);t.right=s.shift(),s.length>0&&(t.left=s.shift()),s.unshift(t)}},this);const o=new this.Expression(s[0]);return function e(t,r){t&&"operator"===t.type&&(e(t.left,r),e(t.right,r),t.value.match(/[\^/*~]/)&&("~"!==t.value&&"operator"===t.right.type&&(t.right.type="expression",t.right.value=new r.Expression(new r.Node("operator",t.right.value)),t.right.value.root.left=t.right.left,t.right.value.root.right=t.right.right,t.right.left=null,t.right.right=null),"operator"===t.left.type&&(t.left.type="expression",t.left.value=new r.Expression(new r.Node("operator",t.left.value)),t.left.value.root.left=t.left.left,t.left.value.root.right=t.left.right,t.left.left=null,t.left.right=null)),"^"!==t.value||"variable"!==t.left.type&&"expression"!==t.left.type||"constant"!==t.right.type&&"variable"!==t.right.type&&"expression"!==t.right.type||(t.type=t.left.type,t.value=t.left.value,t.properties.coefficient=new r.Node("constant",1),t.properties.power=t.right,t.left=null,t.right=null),"*"===t.value&&t.left&&"constant"===t.left.type&&t.right&&("constant"===t.right.type||"variable"===t.right.type||"expression"===t.right.type)&&(t.type=t.right.type,t.value=t.right.value,t.properties.coefficient=t.left,t.right.properties.power&&(t.properties.power=t.right.properties.power),t.left=null,t.right=null))}(o.root,this),o}};